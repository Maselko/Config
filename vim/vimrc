"           _
"    _   __(_)___ ___  __________
"   | | / / / __ `__ \/ ___/ ___/
"  _| |/ / / / / / / / /  / /__
" (_)___/_/_/ /_/ /_/_/   \___/
"
" of Sebastian T. Haściłowicz
"

    let mapleader = " "
    language en_GB.UTF-8

"= Plugins to blnd them all ============================================
    call plug#begin('~/.vim/plugged')
    Plug 'drewtempelmeyer/palenight.vim'
    Plug 'etdev/vim-hexcolor'
    Plug 'junegunn/goyo.vim'
    Plug 'severin-lemaignan/vim-minimap'
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-vividchalk'
    Plug 'vimwiki/vimwiki'
    call plug#end()


"= Cross-Platformisation ===============================================
" Because I hate rewriting .vimrc every single time
    function! WhichEnv() abort
	if exists('g:env')
	    return
	endif
	if has('win64') || has('win32') || has('win16')
	    let g:env = 'WINDOWS'
	else
	    let g:env = toupper(substitute(system('uname'), '\n', '', ''))
	endif
    endfunction
    call WhichEnv()

"= Global ==============================================================
"-- General ------------------------------------------------------------
    set nocompatible
    filetype plugin on
    syntax on
    set linespace=0                   " font space size
    set encoding=utf-8                " encoding
    set number relativenumber         " sets numbers on left
    set backspace=2
    set backspace=indent,eol,start
    set shiftwidth=4
    set autoindent
    set smartindent
    set smarttab
    set softtabstop=4
    if has("gui_running")             " colorschemes
	colo Chester                  " gui colour
        au BufReadPost,BufNewFile *.tex,*.bib colo TeXdarktheme
	au BufReadPost,BufNewFile *.tex,*.bib set wrap linebreak
        command Tex colo TeXdarktheme
        command Kod colo Chester
    else
       colo vividchalk                " terminal colour
    endif

"-- Mappings -----------------------------------------------------------

" To keep my hands still healthy
    noremap ; :
    map ;; ;

" Make easy access to ~/.vimrc
    nnoremap <C-^> :e $MYVIMRC<CR>

" Shortcuts split navigation (Normal Mode only)
    nmap <C-h> <C-w>h
    nmap <C-j> <C-w>j
    nmap <C-k> <C-w>k
    nmap <C-l> <C-w>l

" Resize split screen (Visual Mode only)
    vmap <C-h> <C-w><
    vmap <C-j> <C-w>+
    vmap <C-k> <C-w>-
    vmap <C-l> <C-w>>

" File manager opener
    nnoremap <leader>e :Explore <CR>
    map <leader>fm :Vexplore <CR>

" Toggle 72 character line by pressing <leader> + l
    nnoremap <leader>l :execute "set colorcolumn=" . (&colorcolumn == "" ? "73" : "")<CR>

" Spell-check set to <leader> + o, 'o' for 'Orthography'
    map <leader>oe :setlocal spell! spelllang=en_gb<CR>
    map <leader>op :setlocal spell! spelllang=pl<CR>

" Paste from clipboard
    map <leader>p "+p

" Copy to clipboard
    vnoremap <leader>y "+y
    vnoremap <leader> c<ESC>"+p
    imap <C-v> <ESC>"+pa

" Auto closing brackets "
    inoremap [ []<left>
    inoremap { {}<left>
    inoremap ' ''<left>
    inoremap " ""<left>

" Goyo plugin to make text readable
    map <leader>g :Goyo \| set linebreak\| set relativenumber\| set number<CR>
    let g:goyo_height=90


"-- Other Settings -----------------------------------------------------

" To prevent moving cursor when Esc is pressed
    inoremap <silent> <Esc> <C-O>:stopinsert<CR>

" Autocomplitation
    set tags+=~/.vim/systags
    set wildmode=longest,list,full
    autocmd FileType * setlocal omnifunc=syntaxcomplete#Complete
    set completeopt=menuone
    set shortmess+=c

" Disable autocommenting
    au FileType * setl formatoptions-=c formatoptions-=r formatoptions-=o

" Splits open at the bottom and right, which is non-retarded
    set splitbelow splitright

" Automatically deletes all traling whitespaces
    au BufWritePre * %s/\s\+$//e

" Fuzzy file finder(ish)
    set path+=**

" file browsing
    let g:netrw_banner=0        " disable annoying banner
    let g:netrw_browse_split=0  " open in prior window
    let g:netrw_altv=1          " open splits to the right
    let g:netrw_liststyle=3     " tree view
    let g:netrw_list_hide=netrw_gitignore#Hide()
    let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Rel[oad] new .vimrc
    command Rel execute "so $MYVIMRC"

" Autocomplete \begin \end for LaTeX
    au BufReadPost,BufNewFile *.tex nmap <leader>\ Yp0lceend<ESC>ko


"= Macos ===============================================================
"-- General ------------------------------------------------------------
if (g:env =~# 'DARWIN')
    set guifont=InconsolataLGC:h12    " font on gui
    if !has("gui_running")            " colorschemes
       colo vividchalk                " terminal colour
    endif


"-- Mappings -----------------------------------------------------------
" Run comp.sh to compile the program
    map <leader>c :w! \| term ./Tools/comp.sh %<CR>
" The autocompletation stuff (Insert Mode, Needs to be in polish-pro)
    imap £ <C-j>
    imap § <C-x><C-O>
" Terminal for <leader> + t
    map <leader>t :ter<CR>

"-- Other Settings -----------------------------------------------------
" TeX and LaTeX stuff
    au BufReadPost,BufNewFile *.tex nmap <leader>t :w <bar> exe "!pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p'"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>b :exe "!bibtex '%:p:r.aux'"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>r :exe "!skim '%:p:r.pdf' &"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>c :w <bar> exe "!pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p';bibtex '%:p:r.aux';pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p';pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p';skim '%:p:r.pdf'&"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>d :exe "!rm '%:p:r.log' & rm '%:p:r.aux' & rm '%:p:r.bbl' & rm '%:p:r.blg' & rm '%:p:r.synctex.gz'"<CR><CR>
    au BufReadPost,BufNewFile *.tex command TC :!texcount "%:p"
    au BufReadPost,BufNewFile *.tex inoremap $ $$<left>
    au BufReadPost,BufNewFile *.tex inoremap { []<left>
    au BufReadPost,BufNewFile *.tex inoremap [ {}<left>


"= Binbows =============================================================
elseif (g:env =~# 'WINDOWS')
"-- General ------------------------------------------------------------
    set guifont=InconsolataLGC:h11    " font on gui
    set pythonthreedll=python39.dll
    if has("gui_running")             " colorschemes
	set lines=42 columns=81
	set guioptions=
    else
	colo vividchalk                " terminal colour
    endif

"-- Mappings -----------------------------------------------------------
" The autocompletion stuff
    imap ¬ <C-j>
    imap ` <C-x><C-O>
    " Disable these keys. I have seen too many help pages...
    for key in ['<F1>', '<F15>']  " add keys to disable here
	exec 'cnoremap' key '<Nop>'
    	exec 'inoremap' key '<Nop>'
    	exec 'nnoremap' key '<Nop>'
    	exec 'vnoremap' key '<Nop>'
    endfor
" Terminal for <leader> + t
    map <leader>t :ter powershell<CR>

"-- Other Settings -----------------------------------------------------
" TeX and LaTeX stuff
    au BufReadPost,BufNewFile *.tex nmap <leader>t :w <bar> !start cmd /c pdflatex -aux-directory="%:p:h" -output-directory="%:p:h" "%:p" & taskkill /IM "mupdf.exe" & mupdf -C D0C8B5 "%:p:r.pdf"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>b :!start cmd /c bibtex "%:p:r.aux"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>r :!start cmd /c taskkill /IM "mupdf.exe" & mupdf -C D0C8B5 "%:p:r.pdf"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>c :w <bar> !start cmd /c pdflatex -aux-directory="%:p:h" -output-directory="%:p:h" "%:p" & bibtex "%:p:r.aux" & pdflatex -aux-directory="%:p:h" -output-directory="%:p:h" "%:p" & pdflatex -aux-directory="%:p:h" -output-directory="%:p:h" "%:p" & taskkill /IM "mupdf.exe" & mupdf -C D0C8B5 "%:p:r.pdf"<CR><CR>
    au BufReadPost,BufNewFile *.tex nmap <leader>d :!start cmd /c del "%:p:r.aux" & del "%:p:r.bbl" & del "%:p:r.blg" & del "%:p:r.lof" & del "%:p:r.log" & del "%:p:r.lot" & del "%:p:r.out" & del "%:p:r.synctex.gz" & del "%:p:r.toc"<CR><CR>
    au BufReadPost,BufNewFile *.tex command TC :!texcount "%:p"
    au BufReadPost,BufNewFile *.tex inoremap $ $$<left>
    au BufReadPost,BufNewFile *.tex inoremap { []<left>
    au BufReadPost,BufNewFile *.tex inoremap [ {}<left>

"= Linux ===============================================================
elseif (g:env =~# 'LINUX')
"-- General ------------------------------------------------------------
    set guifont=Inconsolata\ LGC\ Medium\ 10
    if has("gui_running")             " colorschemes
       set lines=55 columns=81
       set guioptions=
    else
       colo default                " terminal colour
    endif
" Terminal for <leader> + t
    map <leader>t :ter<CR>

"-- Mappings -----------------------------------------------------------
    imap ¬ <C-j>
    imap ` <C-x><C-O>

"-- Other Settings -----------------------------------------------------
" TeX and LaTeX stuff
    au BufReadPost,BufNewFile,BufWritePost *.tex nmap <leader>t :w <bar> exe "!pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p'"<CR><CR>
    au BufReadPost,BufNewFile,BufWritePost *.tex nmap <leader>b :exe "!bibtex '%:p:r.aux'"<CR><CR>
    au BufReadPost,BufNewFile,BufWritePost *.tex nmap <leader>r :exe "!xpdf '%:p:r.pdf' &"<CR><CR>
    au BufReadPost,BufNewFile,BufWritePost *.tex nmap <leader>c :w <bar> exe "!pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p';bibtex '%:p:r.aux';pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p';pdflatex -aux-directory='%:p:h' -output-directory='%:p:h' '%:p';xpdf '%:p:r.pdf'&"<CR><CR>
    au BufReadPost,BufNewFile,BufWritePost *.tex nmap <leader>d :exe "!rm '%:p:r.log' & rm '%:p:r.aux' & rm '%:p:r.bbl' & rm '%:p:r.blg' & rm '%:p:r.synctex.gz'"<CR><CR>
    au BufReadPost,BufNewFile *.tex command TC :!texcount "%:p"
    au BufReadPost,BufNewFile *.tex inoremap $ $$<left>
    au BufReadPost,BufNewFile *.tex inoremap { []<left>
    au BufReadPost,BufNewFile *.tex inoremap [ {}<left>


"= BSD =================================================================

endif
"= Pluginstuff =========================================================
" Vimwiki
    let g:vimwiki_list = [{'path': '~/Tools/vim/vimwiki/', 'syntax': 'markdown'}]
    au FileType vimwiki setlocal shiftwidth=3 tabstop=3 noexpandtab


"= STATUSLINE ==========================================================
" This is the code behind my glorious statusline
    let g:currentmode={
	\ 'n'      : 'NORMAL ',
	\ 'no'     : 'N·O•PE ',
	\ 'v'      : 'VISUAL ',
	\ 'V'      : 'V·LINE ',
	\ "\<C-V>" : 'V·BLOCK ',
	\ 's'      : 'SELECT ',
	\ 'S'      : 'S·LINE ',
	\ "\<C-S>" : 'S·BLOCK ',
	\ 'i'      : 'INSERT ',
	\ 'R'      : 'REPLACE ',
	\ 'Rv'     : 'V·REPLACE ',
	\ 'c'      : 'COMMAND ',
	\ 'cv'     : 'VIM EX ',
	\ 'ce'     : '  EX   ',
	\ 'r'      : 'PROMPT ',
	\ 'rm'     : ' MORE  ',
	\ 'r?'     : 'CONFIRM ',
	\ '!'      : 'SH•CMD ',
	\ 't'      : 'TERMINAL '
	\}

" Automatically change the statusline color depending on mode
    function! ChangeStatuslineColor()
	if (mode() =~# '\v(n|no)')
	    exe 'hi! StatusLine ctermbg=002 ctermfg=015 guibg=green4 guifg=white'
	elseif (mode() =~# '\v(v|V)' || g:currentmode[mode()] ==# 'V·BLOCK ')
	    exe 'hi! StatusLine ctermbg=015 ctermfg=000 guibg=white guifg=black'
	elseif (mode() =~# 'i')
	    exe 'hi! StatusLine ctermbg=006 ctermfg=015 guibg=DeepSkyBlue guifg=white'
	elseif (mode() =~# 'R')
	    exe 'hi! StatusLine ctermbg=009 ctermfg=015 guibg=red2 guifg=white'
	elseif (get(g:currentmode, mode(), '') ==# 't')
	    exe 'hi! StatusLine ctermbg=000 ctermfg=015 guibg=black guifg=white'
	else
	    exe 'hi! StatusLine ctermbg=003 ctermfg=015 guibg=goldenrod guifg=white'
	endif
	return ''
    endfunction

" Find out current buffer's size and output it
    function! FileSize()
      let bytes = getfsize(expand('%:p'))
      if (bytes >= 1024)
	let kbytes = bytes / 1024
      endif
      if (exists('kbytes') && kbytes >= 1000)
	let mbytes = kbytes / 1000
      endif
      if bytes <= 0
	return '0'
      endif
      if (exists('mbytes'))
	return mbytes . 'MB '
      elseif (exists('kbytes'))
	return kbytes . 'KB '
      else
	return bytes . 'B '
      endif
    endfunction

    set laststatus=2
    set statusline=
    set statusline+=%{ChangeStatuslineColor()}     " Changing the statusline colour
    set statusline+=%0*\ %{g:currentmode[mode()]}  " Current mode
    set statusline+=%#Visual#           " colour
    set statusline+=%{&paste?'\ PASTE\ ':''}
    set statusline+=%{&spell?'\ SPELL\ ':''}
    set statusline+=%#Cursor#           " colour
    set statusline+=%R                  " readonly flag
    set statusline+=%{&modified?'+':''} " modified [+] flag
    set statusline+=%#CursorIM#         " colour
    set statusline+=%#CursorLine#       " colour
    set statusline+=\ %t\               " short file name
    set statusline+=%=                  " right align
    set statusline+=%#CursorLine#       " colour
    set statusline+=\ %Y\               " file type
    set statusline+=%-3(%{FileSize()}%) "file size
    set statusline+=%#Cursor#           " colour
    set statusline+=\ %3l:%-2c\         " line + column
    set statusline+=%#CursorIM#         " colour
    set statusline+=\ %3p%%\            " percentage
    set noshowmode

" statusline on and off
    map <leader>bs :so ~/.vimrc<CR>
    map <leader>bh :set laststatus=0 \| set showmode \| set ruler<CR>
